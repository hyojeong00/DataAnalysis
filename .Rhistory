"efhumi_spring", "wind_spring", "ff", "ff_damage")]
## EDA분석 데이터셋 생성
dataset_ffp2_30 <- ana_grid_30[, c("age0_200", "age_65", "age65_", "fr_etc_area", "fr_chim_area", "fr_whal_area", "fr_hon_area", "fr_juk_area",
"trail_length", "myo_dist", "non_dist", "bat_dist", "avg_altitude", "cctv_view_dist", "cctv_close_dist",
"tower_dist", "choso_dist", "mun_cnt", "mun_kuk_dist", "mun_bo_dist", "mun_etc_dist", "temp_spring", "humi_spring",
"efhumi_spring", "wind_spring", "ff_cnt", "ff_damage_area")]
## 데이터 분할 (train, test, train_up)
formula <- ff ~ age65_ + fr_chim_area + fr_whal_area + fr_hon_area + trail_length + non_dist + bat_dist + myo_dist +
avg_altitude + mun_cnt + temp_spring + efhumi_spring + wind_spring
formula_dmg <- ff_damage ~ fr_chim_area + fr_whal_area + fr_hon_area + avg_altitude + wind_spring + efhumi_spring
set.seed(80)
#산불발생위험 데이터 분할
int <- createDataPartition(y = dataset_ffp_30$ff, p = 0.70, list = F)
train_30 <- dataset_ffp_30[int, ]; table(train_30$ff)
test_30 <- dataset_ffp_30[-int, ]; table(test_30$ff)
#불균형한 데이터 샘플링
train_up_30 <- ovun.sample(formula, data = train_30, method = "over", N = round(nrow(train_30 %>% filter(ff == 'N'))*2,0))$data
table(train_up_30$ff)
#산불확산위험 데이터 분할
int <- createDataPartition(y = dataset_ffp_30$ff_damage, p = 0.70, list = F)
train_30_dmg <- dataset_ffp_30[int, ]; table(train_30_dmg$ff_damage)
test_30_dmg <- dataset_ffp_30[-int, ]; table(test_30_dmg$ff_damage)
#불균형한 데이터 샘플링
train_up_30_dmg <- ovun.sample(formula_dmg, data = train_30_dmg, method = "over", N = round(nrow(train_30_dmg %>% filter(ff_damage == 'N'))*2,0))$data
table(train_up_30_dmg$ff_damage)
## 로지스틱 회귀분석
glm <- glm(formula, data = train_up_30, family = binomial)
summary(glm)
glm_step <- step(glm,direction="both")
summary(glm_step)
lrtest(glm_step)  #우도비 검정
vif(glm_step) #다중공선성 진단
#avg_altitude vif 4이상-> 제거
glm<-glm(ff ~ age65_ + fr_chim_area + fr_whal_area + fr_hon_area + trail_length + non_dist + bat_dist + myo_dist +
avg_altitude + mun_cnt +efhumi_spring + wind_spring, data=train_up_30,family=binomial)
summary(glm)
glm_step <- step(glm,direction="both")
summary(glm_step)
lrtest(glm_step)  #우도비 검정
vif(glm_step) #다중공선성 진단
## 로지스틱 회귀분석 모델 평가
### confusion matrix (정분류율)
glm_prob <- predict(glm_step, newdata = test_30, type = "response")
glm_pred <- ifelse(glm_prob > 0.60, "Y", "N")
glm_pred <- as.factor(glm_pred)
confusionMatrix(glm_pred, test_30$ff, positive = "Y")
### ROC curve (민감도, 특이도)
glm_roc <- roc.curve(test_30$ff, glm_prob, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(glm_roc, 4))
## F1-score (정밀도, 재현율)
glm_precision <- posPredValue(glm_pred, test_30$ff)
glm_recall <- sensitivity(glm_pred, test_30$ff)
glm_F1 <- (2 * glm_precision * glm_recall) / (glm_precision + glm_recall)
paste("F1-score", ":", round(glm_F1, 4))
### 이항편차
y_obs <- ifelse(test_30$ff == "Y", 1, 0)
yhat_glm <- ifelse(glm_pred == "Y", 1, 0)
(bin_dev_glm <- binomial_deviance(y_obs, yhat_glm))
## 의사결정나무 분석
rpartmod <- rpart(formula, data = train_up_30)
rpart.plot(rpartmod, cex = 0.8)
printcp(rpartmod)
plotcp(rpartmod)
## 의사결정나무 분석 모델 평가
### confusion matrix (정분류율)
p.rpartmod <- prune(rpartmod, cp = rpartmod$cptable[which.min(rpartmod$cptable[, "xerror"]), "CP"])
rpart.plot(p.rpartmod, cex = 0.8)
rpart_pred <- predict(p.rpartmod, test_30, type = 'class')
confusionMatrix(rpart_pred, test_30$ff, positive = "Y")
### ROC curve (민감도, 특이도)
rpart_prob <- predict(p.rpartmod, test_30, type = "prob")[,2]
rpart_roc <- roc.curve(test_30$ff, rpart_prob, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(rpart_roc, 4))
### F1-score (정밀도, 재현율)
rpart_precision <- posPredValue(rpart_pred, test_30$ff)
rpart_recall <- sensitivity(rpart_pred, test_30$ff)
rpart_F1 <- (2 * rpart_precision * rpart_recall) / (rpart_precision + rpart_recall)
paste("F1-score", ":", round(rpart_F1, 4))
### 이항편차
y_obs <- ifelse(test_30$ff == "Y", 1, 0)
yhat_rpart <- ifelse(rpart_pred == "Y", 1, 0)
(bin_dev_rpart <- binomial_deviance(y_obs, yhat_rpart))
## 그레디언트 부스팅 모델
train_up_30$ff <- ifelse(train_up_30$ff == "Y", 1, 0)
gbm_model <- gbm(formula, data = train_up_30, distribution = "bernoulli", n.trees = 5000)
gbm_model
summary(gbm_model, cBars = 12, las = 2)
## 그레디언트 부스팅 모델 평가
# confusion matrix (정분류율)
gbm_prob <- predict(gbm_model, newdata = test_30, n.trees = 5000, type = "response")
gbm_pred <- ifelse(gbm_prob > 0.60, "Y", "N")
gbm_pred <- as.factor(gbm_pred)
confusionMatrix(gbm_pred, test_30$ff, positive="Y")
### ROC curve (민감도, 특이도)
gbm_roc <- roc.curve(test_30$ff, gbm_prob, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(gbm_roc, 4))
### F1-score (정밀도, 재현율)
gbm_precision <- posPredValue(gbm_pred, test_30$ff)
gbm_recall <- sensitivity(gbm_pred, test_30$ff)
gbm_F1 <- (2 * gbm_precision * gbm_recall) / (gbm_precision + gbm_recall)
paste("F1-score", ":", round(gbm_F1, 4))
### 이항편차
y_obs <- ifelse(test_30$ff == "Y", 1, 0)
yhat_gbm <- ifelse(gbm_pred == "Y", 1, 0)
(bin_dev_gbm <- binomial_deviance(y_obs, yhat_gbm))
train_up_30$ff <- ifelse(train_up_30$ff == 1, "Y", "N")
train_up_30$ff <- as.factor(train_up_30$ff)
## 최종 모델 비교 및 선택
result_model <- data.frame(method = c("rpart", "glm", "gbm"),
auc = c(rpart_roc, glm_roc, gbm_roc),
f.score = c(rpart_F1, glm_F1, gbm_F1),
bin_dec = c(bin_dev_rpart, bin_dev_glm, bin_dev_gbm))
print(result_model)
# 시각화
roc.curve(test_30$ff, rpart_prob, col = "red", lwd = 2, lty = 1)$auc
roc.curve(test_30$ff, glm_prob, add = T, col = "blue", lwd = 2, lty = 1)$auc
roc.curve(test_30$ff, gbm_prob, add = T, col = "green", lwd = 2, lty = 1)$auc
abline(0,1)
legend("bottomright", inset = .1,
legend = c("의사결정나무", "로지스틱회귀분석", "그레디언트 부스팅"),
col = c("red", "blue", "green"), lty = 1, lwd = 2)
##함수 생성
formula_dmg <- ff_damage ~  fr_chim_area+fr_whal_area + fr_hon_area + avg_altitude +
efhumi_spring
train_up_30_dmg$ff_damage<-as.factor(train_up_30_dmg$ff_damage)
str(train_up_30_dmg$ff_damage)
## 로지스틱 회귀분석
glm_dmg <- glm(formula, data = train_up_30_dmg, family = 'binomial')
summary(glm_dmg)
glm_step_dmg <- step(glm_dmg)
#formula<-formula(glm_step_dmg)
summary(glm_step_dmg)
lrtest(glm_step_dmg) #우도비 검정
vif(glm_step_dmg) #다중공선성 진단
## 로지스틱 회귀분석 모델 평가
### confusion matrix (정분류율)
glm_prob_dmg <- predict(glm_step_dmg, newdata = test_30_dmg, type = "response")
glm_pred_dmg <- ifelse(glm_prob_dmg > 0.60, "Y", "N")
glm_pred_dmg <- as.factor(glm_pred_dmg)
str(test_30_dmg$ff_damage)
confusionMatrix(glm_pred_dmg, test_30_dmg$ff_damage,positive="Y")
##오류 다 N로 예측
### ROC curve (민감도, 특이도)
glm_roc_dmg <- roc.curve(test_30_dmg$ff_damage, glm_prob_dmg, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(glm_roc_dmg, 4))
table(test_30_dmg$ff_damage)
library(pROC)
glm_pred_dmg<-ifelse(glm_pred_dmg=="Y",1,0)
test_30_dmg$ff_damage<-ifelse(test_30_dmg$ff_damage=="Y",1,0)
auc(test_30_dmg$ff_damage,glm_pred_dmg)
### F1-score (정밀도, 재현율)
glm_pred_dmg<-as.factor(glm_pred_dmg)
test_30_dmg$ff_damage<-as.factor(test_30_dmg$ff_damage)
glm_precision_dmg <- posPredValue(glm_pred_dmg, test_30_dmg$ff_damage)
glm_recall_dmg <- sensitivity(glm_pred_dmg, test_30_dmg$ff_damage)
glm_F1_dmg <- (2 * glm_precision_dmg * glm_recall_dmg) / (glm_precision_dmg + glm_recall_dmg)
paste("F1-score", ":", round(glm_F1_dmg, 4))
### 이항편차
y_obs_dmg <- ifelse(test_30_dmg$ff_damage == "Y", 1, 0)
yhat_glm_dmg <- ifelse(glm_pred_dmg == "Y", 1, 0)
(bin_dev_glm_dmg <- binomial_deviance(y_obs_dmg, yhat_glm_dmg))
## 의사결정나무 분석
rpartmod_dmg <- rpart(formula_dmg, data = train_up_30_dmg)
rpart.plot(rpartmod_dmg, cex = 0.8)
printcp(rpartmod_dmg)
plotcp(rpartmod_dmg)
## 의사결정나무 분석 모델 평가
### confusion matrix (정분류율)
p.rpartmod_dmg <- prune(rpartmod_dmg, cp = rpartmod_dmg$cptable[which.min(rpartmod_dmg$cptable[, "xerror"]), "CP"])
rpart.plot(p.rpartmod_dmg, cex = 0.8)
rpart_pred_dmg <- predict(p.rpartmod_dmg, test_30_dmg, type = 'class')
table(rpart_pred_dmg)
str(test_30_dmg$ff_damage)
test_30_dmg$ff_damage<-as.factor(test_30_dmg$ff_damage)
levels(test_30_dmg$ff_damage)<-c('N','Y')
head(test_30_dmg$ff_damage)
confusionMatrix(rpart_pred_dmg, test_30_dmg$ff_damage)
### ROC curve (민감도, 특이도)
rpart_prob_dmg <- predict(p.rpartmod_dmg, test_30_dmg, type = "prob")[,2]
rpart_roc_dmg <- roc.curve(test_30_dmg$ff_damage, rpart_prob_dmg, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(rpart_roc_dmg, 4))
### F1-score (정밀도, 재현율)
rpart_precision_dmg <- posPredValue(rpart_pred_dmg, test_30_dmg$ff_damage)
rpart_recall_dmg <- sensitivity(rpart_pred_dmg, test_30_dmg$ff_damage)
rpart_F1_dmg <- (2 * rpart_precision_dmg * rpart_recall_dmg) / (rpart_precision_dmg + rpart_recall_dmg)
paste("F1-score", ":", round(rpart_F1_dmg, 4))
### 이항편차
y_obs_dmg <- ifelse(test_30_dmg$ff_damage == "Y", 1, 0)
yhat_rpart_dmg <- ifelse(rpart_pred_dmg == "Y", 1, 0)
(bin_dev_rpart_dmg <- binomial_deviance(y_obs_dmg, yhat_rpart_dmg))
## 그레디언트 부스팅 모델
train_up_30_dmg$ff_damage <- ifelse(train_up_30_dmg$ff_damage == "Y", 1, 0)
gbm_model_dmg <- gbm(formula_dmg, data = train_up_30_dmg, distribution = "bernoulli", n.trees = 5000)
gbm_model_dmg
summary(gbm_model_dmg, cBars = 12, las = 2)
## 그레디언트 부스팅 모델 평가
# confusion matrix (정분류율)
gbm_prob_dmg <- predict(gbm_model_dmg, newdata = test_30_dmg, n.trees = 5000, type = "response")
gbm_pred_dmg <- ifelse(gbm_prob_dmg > 0.60, "Y", "N")
gbm_pred_dmg <- as.factor(gbm_pred_dmg)
confusionMatrix(gbm_pred_dmg, test_30_dmg$ff_damage)
### ROC curve (민감도, 특이도)
gbm_roc_dmg <- roc.curve(test_30_dmg$ff_damage, gbm_prob_dmg, col = 2, lwd = 2, lty = 1)$auc
paste("Area under the Curve", ":", round(gbm_roc_dmg, 4))
### F1-score (정밀도, 재현율)
gbm_precision_dmg <- posPredValue(gbm_pred_dmg, test_30_dmg$ff_damage)
gbm_recall_dmg <- sensitivity(gbm_pred_dmg, test_30_dmg$ff_damage)
gbm_F1_dmg <- (2 * gbm_precision_dmg * gbm_recall_dmg) / (gbm_precision_dmg + gbm_recall_dmg)
paste("F1-score", ":", round(gbm_F1_dmg, 4))
### 이항편차
y_obs_dmg <- ifelse(test_30_dmg$ff_damage == "Y", 1, 0)
yhat_gbm_dmg <- ifelse(gbm_pred_dmg == "Y", 1, 0)
(bin_dev_gbm_dmg <- binomial_deviance(y_obs_dmg, yhat_gbm_dmg))
train_up_30_dmg$ff_damage <- ifelse(train_up_30_dmg$ff_damage == 1, "Y", "N")
train_up_30_dmg$ff_damage <- as.factor(train_up_30_dmg$ff_damage)
## 최종 모델 비교 및 선택
result_model_dmg <- data.frame(method = c("rpart", "glm", "gbm"),
auc = c(rpart_roc_dmg, glm_roc_dmg, gbm_roc_dmg),
f.score = c(rpart_F1_dmg, glm_F1_dmg, gbm_F1_dmg),
bin_dec = c(bin_dev_rpart_dmg, bin_dev_glm_dmg, bin_dev_gbm_dmg))
print(result_model_dmg)
# 시각화
roc.curve(test_30_dmg$ff_damage, rpart_prob_dmg, col = "red", lwd = 2, lty = 1)$auc
roc.curve(test_30_dmg$ff_damage, glm_prob_dmg, add = T, col = "blue", lwd = 2, lty = 1)$auc
roc.curve(test_30_dmg$ff_damage, gbm_prob_dmg, add = T, col = "green", lwd = 2, lty = 1)$auc
abline(0,1)
legend("bottomright", inset = .1,
legend = c("의사결정나무", "로지스틱회귀분석", "그레디언트 부스팅"),
col = c("red", "blue", "green"), lty = 1, lwd = 2)
##산불발생위험 모델
## cutoff 결정
(grid <- expand.grid(cut = seq(0.01, by = 0.01)))
cutoff_result <- foreach(g = 1:NROW(grid), .combine = rbind) %do% {
prob <- predict(glm_step, newdata = test_30, type = "response")
pred <- ifelse(prob > grid[g, "cut"], "Y", "N")
pred <- as.factor(pred)
matrix <- confusionMatrix(pred, test_30$ff)
accuracy <- matrix$overall[1]
sensitivity <- matrix$byClass[1]
specificity <- matrix$byClass[2]
auc <- roc.curve(test_30$ff, pred, plotit = F)
return(data.table(g,
accuracy = round(accuracy, 4),
auc = auc$auc,
sensitivity = round(sensitivity, 4),
specificity = round(specificity, 4)))
}
cutoff_result <- data.frame(grid, cutoff_result)
## 최종 산불발생위험 모델 평가 (cutoff값 적용)
## confustion matrix (정분류율)
prob_result <- predict(glm_step, newdata = dataset_ffp_30, type = "response")
pred_result <- ifelse(prob_result > 0.55, "Y", "N")                         #cutoff값에 맞춰 수정
pred_result <- as.factor(pred_result)
(matrix <- confusionMatrix(pred_result, dataset_ffp_30$ff))
## ROC curve (민감도, 특이도)
(roc_result <- roc.curve(dataset_ffp_30$ff, prob_result, col = 2, lwd = 2, lty = 1)$auc)
legend("bottomright", inset = .1, cex = 1.5,
legend = c("Area Under Curve : 0.65"),   #auc값 입력
col = "red", lty = 1, lwd = 2)
## F1-score (정밀도, 재현율)
precision_result <- posPredValue(pred_result, dataset_ffp_30$ff)
recall_result <- sensitivity(pred_result, dataset_ffp_30$ff)
(F1_result <- (2 * precision_result * recall_result) / (precision_result + recall_result))
## 이항편차
y_obs <- ifelse(dataset_ffp_30$ff == "Y", 1, 0)
yhat_result <- ifelse(pred_result == "Y", 1, 0)
(bin.dev_result <- binomial_deviance(y_obs, yhat_result))
##산불확산위험 모델
## cutoff 결정
(grid <- expand.grid(cut = seq(0.01, by = 0.01)))
cutoff_result_dmg <- foreach(g = 1:NROW(grid), .combine = rbind) %do% {
prob <- predict(glm_step_dmg, newdata = test_30_dmg, type = "response")
pred <- ifelse(prob > grid[g, "cut"], "Y", "N")
pred <- as.factor(pred)
matrix <- confusionMatrix(pred, test_30_dmg$ff_damage)
accuracy <- matrix$overall[1]
sensitivity <- matrix$byClass[1]
specificity <- matrix$byClass[2]
auc <- roc.curve(test_30_dmg$ff_damage, pred, plotit = F)
return(data.table(g,
accuracy = round(accuracy, 4),
auc = auc$auc,
sensitivity = round(sensitivity, 4),
specificity = round(specificity, 4)))
}
cutoff_result_dmg <- data.frame(grid, cutoff_result_dmg)
## 최종 산불확산위험 모델 평가 (cutoff 값 적용)
## confustion matrix (정분류율)
prob_result_dmg <- predict(glm_step_dmg, newdata = dataset_ffp_30, type = "response")
pred_result_dmg <- ifelse(prob_result_dmg > 0.60, "Y", "N")                          #cutoff값에 맞춰 수정
pred_result_dmg <- as.factor(pred_result_dmg)
(matrix_dmg <- confusionMatrix(pred_result_dmg, dataset_ffp_30$ff_damage))
## ROC curve (민감도, 특이도)
(roc_result_dmg <- roc.curve(dataset_ffp_30$ff_damage, prob_result_dmg, col = 2, lwd = 2, lty = 1)$auc)
legend("bottomright", inset = .1, cex = 1.5,
legend = c("Area Under Curve : 0.64"),   #auc값 입력
col = "red", lty = 1, lwd = 2)
## F1-score (정밀도, 재현율)
precision_result_dmg <- posPredValue(pred_result_dmg, dataset_ffp_30$ff_damage)
recall_result_dmg <- sensitivity(pred_result_dmg, dataset_ffp_30$ff_damage)
(F1_result_dmg <- (2 * precision_result_dmg * recall_result_dmg) / (precision_result_dmg + recall_result_dmg))
## 이항편차
y_obs_dmg <- ifelse(dataset_ffp_30$ff_damage == "Y", 1, 0)
yhat_result_dmg <- ifelse(pred_result_dmg == "Y", 1, 0)
(bin.dev_result_dmg <- binomial_deviance(y_obs_dmg, yhat_result_dmg))
## 산불감시우선지수 데이터셋 생성
# 산불발생, 산불확산 예측변수 생성
all_prob <- predict(glm_step, newdata = dataset_ffp_30, type = "response")
all_pred <- ifelse(all_prob > 0.55, "Y", "N")                                      #cutoff 적용
all_pred <- as.factor(all_pred)
all_prob_dmg <- predict(glm_step_dmg, newdata = dataset_ffp_30, type = "response")
all_pred_dmg <- ifelse(all_prob_dmg > 0.60, "Y", "N")                              #cutoff 적용
all_pred_dmg <- as.factor(all_pred_dmg)
# 데이터셋 생성
all_table <- data.table(dataset_ffp_30$gid_nm, dataset_ffp_30$ff, all_pred, all_prob, dataset_ffp_30$ff_damage, all_pred_dmg, all_prob_dmg,
dataset_ffp_30$cctv_view_dist, dataset_ffp_30$cctv_close_dist, dataset_ffp_30$tower_dist, dataset_ffp_30$choso_dist,
dataset_ffp_30$mun_kuk_dist, dataset_ffp_30$mun_bo_dist, dataset_ffp_30$mun_etc_dist)
names(all_table) <- c("gid_nm", "ff_real", "ff_pred", "ff_prob", "dmg_real", "dmg_pred", "dmg_prob",
"cctv_view_dist", "cctv_close_dist", "tower_dist", "choso_dist", "mun_kuk_dist","mun_bo_dist", "mun_etc_dist")
all_table$gid_nm <- as.character(all_table$gid_nm)
##산불발생 위험지수 1~10 (산불발생 확률이 높을수록 지수가 높음) -> 절대값
all_table$ff_prob <- round(all_table$ff_prob, 4)
all_table[ff_prob <= 1.0, grade_ff_risk := 10]
all_table[ff_prob <= 0.9, grade_ff_risk := 9]
all_table[ff_prob <= 0.8, grade_ff_risk := 8]
all_table[ff_prob <= 0.7, grade_ff_risk := 7]
all_table[ff_prob <= 0.6, grade_ff_risk := 6]
all_table[ff_prob <= 0.5, grade_ff_risk := 5]
all_table[ff_prob <= 0.4, grade_ff_risk := 4]
all_table[ff_prob <= 0.3, grade_ff_risk := 3]
all_table[ff_prob <= 0.2, grade_ff_risk := 2]
all_table[ff_prob <= 0.1, grade_ff_risk := 1]
##산불확산 위험지수 1~10 (산불확대 확률이 높을수록 지수가 높음) -> 절대값
all_table$dmg_prob <- round(all_table$dmg_prob, 4)
all_table[dmg_prob <= 1.0, grade_dmg_risk := 10]
all_table[dmg_prob <= 0.9, grade_dmg_risk := 9]
all_table[dmg_prob <= 0.8, grade_dmg_risk := 8]
all_table[dmg_prob <= 0.7, grade_dmg_risk := 7]
all_table[dmg_prob <= 0.6, grade_dmg_risk := 6]
all_table[dmg_prob <= 0.5, grade_dmg_risk := 5]
all_table[dmg_prob <= 0.4, grade_dmg_risk := 4]
all_table[dmg_prob <= 0.3, grade_dmg_risk := 3]
all_table[dmg_prob <= 0.2, grade_dmg_risk := 2]
all_table[dmg_prob <= 0.1, grade_dmg_risk := 1]
##감시자원 취약지수 1~10 (감시자원과의 거리가 멀수록 위험지수가 높음) -> 상대값
#10분위수 생성
grade_view_percent <- quantile(all_table$cctv_view_dist, prob = seq(0.1, 1, 0.1))
grade_close_percent <- quantile(all_table$cctv_close_dist, prob = seq(0.1, 1, 0.1))
grade_tower_percent <- quantile(all_table$tower_dist, prob = seq(0.1, 1, 0.1))
grade_choso_percent <- quantile(all_table$choso_dist, prob = seq(0.1, 1, 0.1))
#조망형카메라와의 거리 등급
all_table[cctv_view_dist <= grade_view_percent[10], grade_view_gamsi := 10]
all_table[cctv_view_dist <= grade_view_percent[9], grade_view_gamsi := 9]
all_table[cctv_view_dist <= grade_view_percent[8], grade_view_gamsi := 8]
all_table[cctv_view_dist <= grade_view_percent[7], grade_view_gamsi := 7]
all_table[cctv_view_dist <= grade_view_percent[6], grade_view_gamsi := 6]
all_table[cctv_view_dist <= grade_view_percent[5], grade_view_gamsi := 5]
all_table[cctv_view_dist <= grade_view_percent[4], grade_view_gamsi := 4]
all_table[cctv_view_dist <= grade_view_percent[3], grade_view_gamsi := 3]
all_table[cctv_view_dist <= grade_view_percent[2], grade_view_gamsi := 2]
all_table[cctv_view_dist <= grade_view_percent[1], grade_view_gamsi := 1]
#밀착형카메라와의 거리 등급
all_table[cctv_close_dist <= grade_close_percent[10], grade_close_gamsi := 10]
all_table[cctv_close_dist <= grade_close_percent[9], grade_close_gamsi := 9]
all_table[cctv_close_dist <= grade_close_percent[8], grade_close_gamsi := 8]
all_table[cctv_close_dist <= grade_close_percent[7], grade_close_gamsi := 7]
all_table[cctv_close_dist <= grade_close_percent[6], grade_close_gamsi := 6]
all_table[cctv_close_dist <= grade_close_percent[5], grade_close_gamsi := 5]
all_table[cctv_close_dist <= grade_close_percent[4], grade_close_gamsi := 4]
all_table[cctv_close_dist <= grade_close_percent[3], grade_close_gamsi := 3]
all_table[cctv_close_dist <= grade_close_percent[2], grade_close_gamsi := 2]
all_table[cctv_close_dist <= grade_close_percent[1], grade_close_gamsi := 1]
#감시탑과의 거리 등급
all_table[tower_dist <= grade_tower_percent[10], grade_tower_gamsi := 10]
all_table[tower_dist <= grade_tower_percent[9], grade_tower_gamsi := 9]
all_table[tower_dist <= grade_tower_percent[8], grade_tower_gamsi := 8]
all_table[tower_dist <= grade_tower_percent[7], grade_tower_gamsi := 7]
all_table[tower_dist <= grade_tower_percent[6], grade_tower_gamsi := 6]
all_table[tower_dist <= grade_tower_percent[5], grade_tower_gamsi := 5]
all_table[tower_dist <= grade_tower_percent[4], grade_tower_gamsi := 4]
all_table[tower_dist <= grade_tower_percent[3], grade_tower_gamsi := 3]
all_table[tower_dist <= grade_tower_percent[2], grade_tower_gamsi := 2]
all_table[tower_dist <= grade_tower_percent[1], grade_tower_gamsi := 1]
#감시초소와의 거리 등급
all_table[choso_dist <= grade_choso_percent[10], grade_choso_gamsi := 10]
all_table[choso_dist <= grade_choso_percent[9], grade_choso_gamsi := 9]
all_table[choso_dist <= grade_choso_percent[8], grade_choso_gamsi := 8]
all_table[choso_dist <= grade_choso_percent[7], grade_choso_gamsi := 7]
all_table[choso_dist <= grade_choso_percent[6], grade_choso_gamsi := 6]
all_table[choso_dist <= grade_choso_percent[5], grade_choso_gamsi := 5]
all_table[choso_dist <= grade_choso_percent[4], grade_choso_gamsi := 4]
all_table[choso_dist <= grade_choso_percent[3], grade_choso_gamsi := 3]
all_table[choso_dist <= grade_choso_percent[2], grade_choso_gamsi := 2]
all_table[choso_dist <= grade_choso_percent[1], grade_choso_gamsi := 1]
#조망형 30%, 밀착형 20%, 감시탑 30%, 감시초소20% 가중치 적용하여 10점 변환
all_table$grade_gamsi <- (all_table$grade_view_gamsi * 0.3) + (all_table$grade_close_gamsi * 0.2) + (all_table$grade_tower_gamsi * 0.3) + (all_table$grade_choso_gamsi * 0.2)
##문화재소실 위험지수 1~10 (문화재와의 거리가 가까울수록 위험지수가 높음) -> 상대값
#10분위수 생성
grade_kuk_percent <- quantile(all_table$mun_kuk_dist, prob = seq(0.1, 1, 0.1))
grade_bo_percent <- quantile(all_table$mun_bo_dist, prob = seq(0.1, 1, 0.1))
grade_etc_percent <- quantile(all_table$mun_etc_dist, prob = seq(0.1, 1, 0.1))
#국보문화재와의 거리 등급
all_table[mun_kuk_dist <= grade_kuk_percent[10], grade_kuk := 1]
all_table[mun_kuk_dist <= grade_kuk_percent[9], grade_kuk := 2]
all_table[mun_kuk_dist <= grade_kuk_percent[8], grade_kuk := 3]
all_table[mun_kuk_dist <= grade_kuk_percent[7], grade_kuk := 4]
all_table[mun_kuk_dist <= grade_kuk_percent[6], grade_kuk := 5]
all_table[mun_kuk_dist <= grade_kuk_percent[5], grade_kuk := 6]
all_table[mun_kuk_dist <= grade_kuk_percent[4], grade_kuk := 7]
all_table[mun_kuk_dist <= grade_kuk_percent[3], grade_kuk := 8]
all_table[mun_kuk_dist <= grade_kuk_percent[2], grade_kuk := 9]
all_table[mun_kuk_dist <= grade_kuk_percent[1], grade_kuk := 10]
#보물문화재와의 거리 등급
all_table[mun_bo_dist <= grade_bo_percent[10], grade_bo := 1]
all_table[mun_bo_dist <= grade_bo_percent[9], grade_bo := 2]
all_table[mun_bo_dist <= grade_bo_percent[8], grade_bo := 3]
all_table[mun_bo_dist <= grade_bo_percent[7], grade_bo := 4]
all_table[mun_bo_dist <= grade_bo_percent[6], grade_bo := 5]
all_table[mun_bo_dist <= grade_bo_percent[5], grade_bo := 6]
all_table[mun_bo_dist <= grade_bo_percent[4], grade_bo := 7]
all_table[mun_bo_dist <= grade_bo_percent[3], grade_bo := 8]
all_table[mun_bo_dist <= grade_bo_percent[2], grade_bo := 9]
all_table[mun_bo_dist <= grade_bo_percent[1], grade_bo := 10]
#기타문화재와의 거리 등급
all_table[mun_etc_dist <= grade_etc_percent[10], grade_etc := 1]
all_table[mun_etc_dist <= grade_etc_percent[9], grade_etc := 2]
all_table[mun_etc_dist <= grade_etc_percent[8], grade_etc := 3]
all_table[mun_etc_dist <= grade_etc_percent[7], grade_etc := 4]
all_table[mun_etc_dist <= grade_etc_percent[6], grade_etc := 5]
all_table[mun_etc_dist <= grade_etc_percent[5], grade_etc := 6]
all_table[mun_etc_dist <= grade_etc_percent[4], grade_etc := 7]
all_table[mun_etc_dist <= grade_etc_percent[3], grade_etc := 8]
all_table[mun_etc_dist <= grade_etc_percent[2], grade_etc := 9]
all_table[mun_etc_dist <= grade_etc_percent[1], grade_etc := 10]
#국보60%, 보물30%, 기타10% 가중치 적용하여 10점 변환
all_table$grade_mun <- (all_table$grade_kuk * 0.6) + (all_table$grade_bo * 0.3) + (all_table$grade_etc * 0.1)
## 최종 산불감시 우선지수 생성(산불발생40%, 산불확산10%, 감시취약40%, 문화재소실10% 가중치 적용)
all_table$grade_result <- (all_table$grade_ff_risk * 0.4) + (all_table$grade_dmg_risk * 0.1) + (all_table$grade_gamsi * 0.4) + (all_table$grade_mun * 0.1)
## 최종 산불감시 우선지수 등급화(6등급)
all_table <- all_table %>% mutate(grade_result_6 = rank(grade_result)/nrow(all_table)) %>%
mutate(grade_result_6 = ifelse(grade_result_6 >= 0.95, "6.매우높음",
ifelse(grade_result_6 >= 0.80 & grade_result_6 <0.95, "5.높음",
ifelse(grade_result_6 >= 0.50 & grade_result_6 <0.80, "4.다소높음",
ifelse(grade_result_6 >= 0.20 & grade_result_6 <0.50, "3.다소낮음",
ifelse(grade_result_6 >= 0.05 & grade_result_6 <0.20, "2.낮음", "1,매우낮음"))))))
table(all_table$grade_result_6)
all_table_result <- all_table[,c(1, 15:27)]
str(all_table_result)
View(all_table_result)
## 변수명 변경 및 결과 저장
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "age0_200"] <- "전체인구"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "age_65"] <- "65세이하"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "age65_"] <- "65세이상"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "fr_etc_area"] <- "기타산림면적"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "fr_chim_area"] <- "침엽수림면적"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "fr_whal_area"] <- "활엽수림면적"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "fr_hon_area"] <- "혼효림면적"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "fr_juk_area"] <- "죽림면적"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "trail_length"] <- "등산로길이"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "myo_dist"] <- "묘거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "non_dist"] <- "논거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "bat_dist"] <- "밭거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "avg_altitude"] <- "평균고도"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "cctv_view_dist"] <- "조망형거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "cctv_close_dist"] <- "밀착형거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "tower_dist"] <- "감시탑거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "choso_dist"] <- "초소거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "mun_cnt"] <- "문화재수"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "mun_dist"] <- "문화재거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "mun_kuk_dist"] <- "국보거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "mun_bo_dist"] <- "보물거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "mun_etc_dist"] <- "기타거리"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "temp_spring"] <- "봄평균기온"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "humi_spring"] <- "봄평균습도"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "wind_spring"] <- "봄평균풍속"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "efhumi_spring"] <- "봄평균실습도"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "ff"] <- "산불발생여부"
colnames(dataset_ffp_30)[colnames(dataset_ffp_30) == "ff_damage"] <- "산불확산여부"
grid_result <- merge(dataset_ffp_30, all_table_result, by = "gid_nm", all = F)
colnames(grid_result)[colnames(grid_result) == "grade_ff_risk"] <- "발생위험지수"
colnames(grid_result)[colnames(grid_result) == "grade_dmg_risk"] <- "확산위험지수"
colnames(grid_result)[colnames(grid_result) == "grade_view_gamsi"] <- "조망형등급"
colnames(grid_result)[colnames(grid_result) == "grade_close_gamsi"] <- "밀착형등급"
colnames(grid_result)[colnames(grid_result) == "grade_tower_gamsi"] <- "감시탑등급"
colnames(grid_result)[colnames(grid_result) == "grade_choso_gamsi"] <- "감시초소등급"
colnames(grid_result)[colnames(grid_result) == "grade_gamsi"] <- "감시취약지수"
colnames(grid_result)[colnames(grid_result) == "grade_kuk"] <- "국보등급"
colnames(grid_result)[colnames(grid_result) == "grade_bo"] <- "보물등급"
colnames(grid_result)[colnames(grid_result) == "grade_etc"] <- "기타등급"
colnames(grid_result)[colnames(grid_result) == "grade_mun"] <- "문화재지수"
colnames(grid_result)[colnames(grid_result) == "grade_result"] <- "최종지수"
colnames(grid_result)[colnames(grid_result) == "grade_result_6"] <- "최종지수_6"
write.csv(grid_result, "ffp_ana_result.csv", row.names = F)
## 패키지 로드
library(RPostgreSQL)
library(data.table)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(party)
library(e1071)
library(lmtest)
library(ROSE)
library(foreach)
library(ROCR)
library(ggplot2)
library(dplyr)
library(randomForest)
library(plyr)
library(gbm)
library(car)
